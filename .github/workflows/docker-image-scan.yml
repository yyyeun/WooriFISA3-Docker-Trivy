name: Docker Image Build and Scan

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write    # 저장소에 파일을 업로드할 수 있는 권한
      security-events: write  # Code Scanning 결과를 업로드할 수 있는 권한
      
    steps:
      # 1. Repository 체크아웃
      - uses: actions/checkout@v4

      # 2. Docker 로그인 (선택 사항, 만약 Docker Hub에 이미지를 푸시할 계획이 있다면 필요)
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
    
      # 3. Docker 이미지 빌드
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/my-trivy-image:latest .
        
      # 4. Trivy 설치
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
          
      # 5. Docker 이미지 취약점 스캔
      - name: Scan Docker image for vulnerabilities
        run: trivy image --format sarif --output trivy-results.sarif ${{ secrets.DOCKER_USERNAME }}/my-trivy-image:latest
        
      # 6. Docker Hub에 이미지 푸시 (선택 사항)
      - name: Push Docker image to Docker Hub
        if: success()
        run: docker push ${{ secrets.DOCKER_USERNAME }}/my-trivy-image:latest
          
      # 7. 취약점 검사 결과를 GitHub Code Scanning으로 업로드
      - name: Upload Trivy scan results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
